buildscript {
  repositories {
    maven { url 'https://plugins.gradle.org/m2/' }
  }
}

apply plugin: 'application'

repositories {
  mavenCentral()
  maven { url "https://packages.confluent.io/maven" }
  maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
  maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots/' }
}

dependencies {
  implementation group: 'org.swimos', name: 'swim-api', version: "$SWIMOS_VERSION"
  implementation group: 'org.swimos', name: 'swim-server', version: "$SWIMOS_VERSION"
  implementation group: 'org.swimos', name: 'swim-client', version: "$SWIMOS_VERSION"

  implementation group: 'io.nstream', name: 'nstream-adapter-runtime', version: "$NSTREAM_VERSION"
  implementation group: 'io.nstream', name: 'nstream-adapter-common', version: "$NSTREAM_VERSION"
  implementation group: 'io.nstream', name: 'nstream-adapter-confluent', version: "$NSTREAM_VERSION"

  // Only required by the "schema" variation
  implementation group: 'io.confluent', name: 'kafka-avro-serializer', version: '7.4.0'
  implementation group: 'io.nstream', name: 'nstream-adapter-avro', version: "$NSTREAM_VERSION"

  // Use TestNG framework, also requires calling test.useTestNG() below
  testImplementation 'org.testng:testng:7.4.0'
}

application {
  // Define the main class for the application.
  mainClass = 'nstream.adapter.runtime.AppPlane'
}

task runSim(type: JavaExec) {
  group = 'application'
  classpath sourceSets.main.runtimeClasspath
  mainClass = 'nstream.starter.sim.SimLauncher'
  setSystemProperties(Map.of("swim.config", "sim.recon"))
}

task runSchema(type: JavaExec) {
  group = 'application'
  classpath sourceSets.main.runtimeClasspath
  mainClass = 'nstream.adapter.runtime.AppPlane'
  setSystemProperties(Map.of("swim.config", "schema/server.recon"))
}

task runSchemaSim(type: JavaExec) {
  group = 'application'
  classpath sourceSets.main.runtimeClasspath
  mainClass = 'nstream.starter.sim.SimLauncher'
  setSystemProperties(Map.of("swim.config", "schema/sim.recon"))
}

tasks.named('test') {
  // Use TestNG for unit tests.
  useTestNG()
}
